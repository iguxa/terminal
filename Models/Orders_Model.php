<?php
/**
 * Created by PhpStorm.
 * User: iguxa
 * Date: 11.11.18
 * Time: 1:34
 */

namespace Models;
use App\{Db,Exeption};

class Orders_Model extends Db
{
   /// protected static $_instance;
    protected $tb_name = 'orders';
    public $orders_id;
    protected $request;

    public function init($data = null)
    {
        parent::init($data);
        $this->request = $data;
    }

    //public function __destruct()
    //{
    //    $orders_id = $this->orders_id ?: $this->request['orders_id'];
    //    Triggers_Models::getInstance($orders_id)->Trigger();
    //    parent::__destruct(); // TODO: Change the autogenerated stub
    //}

    public function setOrders_id($orders_id) :void
    {
        $this->orders_id = $orders_id;
    }

    public function createOrder()
    {
        $request = $this->request;
        $sql = "INSERT INTO $this->db_name.$this->tb_name (users_id, categories_id, item,description,discount,sum1,sum2,status_id)
                VALUES (:users_id, :categories_id, :item,:description,:discount,:sum1,:sum2,:status_id);";
        $params = array(
            'users_id' => $request['users_id'],
            'categories_id' => $request['categories_id'],
            'item' => $request['item'],
            'description' => $request['description'],
            'discount' => $request['discount'],
            'sum1' => $request['sum1'],
            'sum2' => $request['sum2'],
            'status_id' => $request['status_id'],
            );

        $result = $this->Execute($sql,$params);
        if($result){
            $orders_id = $this->connection->lastInsertId();
            $this->setOrders_id($orders_id);
            Images_Model::getInstance()->InsertImages($this->orders_id,$request);
            $sql = "UPDATE $this->db_name.$this->tb_name SET images_id = :orders_id WHERE id = :orders_id";
            $params = array(
                'orders_id' => $this->orders_id,);
            $result = $this->Execute($sql,$params);
            if(!$result){
                return Exeption::getInstance()->error404($this->status->errorInfo());
            }
        }else{
            return Exeption::getInstance()->error404($this->status->errorInfo());
        }

        Triggers_Models::getInstance($orders_id)->Trigger();
        return $result;
    }
    public function getOrders()
    {
        $sql = "SELECT orders.id,orders.date,orders.discount,orders.item,orders.description,orders.sum1,orders.sum2,status.status FROM terminal.orders
                JOIN status on orders.status_id=status.id order by orders.id desc ";
        $result = $this->getPdo($sql)->fetchAll();
        return $result;
    }
    public function getOrderById($id)
    {
        $sql = "SELECT orders.*,status.status,categories.categories FROM terminal.orders
                JOIN status on orders.status_id=status.id
                JOIN categories on orders.categories_id=categories.id
                JOIN users on orders.users_id = users.id
                where orders.id = :id ";
        $params = ['id'=>$id];
        $result = $this->Execute($sql,$params);
        if(!$result){
            return Exeption::getInstance()->error404($this->status->errorInfo());
        }
        $order = $this->status->fetch();
        $oreders_images = Images_Model::getInstance()->getImagesByOrderId($id);
        $option_status = Status_Model::getInstance()->GetStatusList();
        $data['order'] = $order;
        $data['orders_images'] = $oreders_images;
        $data['option_status'] = $option_status;
        return $data;
    }
    public function ChangeOrderById()
    {
        $request = $this->request;
        if($request['messages']){
            $create_chat = Chats_Model::getInstance()->CreateMessage($request);
            if(!$create_chat){
                return Exeption::getInstance()->error404($this->status->errorInfo());
            }
        }
        $sql = "UPDATE $this->db_name.$this->tb_name SET status_id = :status_id,sum1 = :sum1,sum2 = :sum2,`check`=:check WHERE id = :orders_id";
        $params = array(
            'status_id' => $request['status_id'],
            'check' => $request['check'],
            'sum1' => $request['sum1'],
            'sum2' => $request['sum2'],
            'orders_id' => $request['orders_id'],
        );
        $result = $this->Execute($sql,$params);
        if(!$result){
            return Exeption::getInstance()->error404($this->status->errorInfo());
        }
        Triggers_Models::getInstance($request['orders_id'])->Trigger();

        return $this->Execute($sql,$params);
    }

}